user
Now alter ./docs/PROJECT_PLAN.md with learnings from our failed attempts to use Better-Auth. Come up with a plan to research the appropriate docs and properly implement Better-Auth
with Postgresql and the rest of our stack.

    command

    $ apply_patch <<'PATCH'
    *** Begin Patch
    *** Update File: docs/PROJECT_PLAN.md
    @@
     ### 8  Lessons learned from first (failed) Better-Auth attempt
    +
    +We tried to “drop‐in” Better-Auth v1.2 with the Postgres pool, but ran into a
    +few sharp edges.  Documenting them here so the next integration cycle is
    +faster and cleaner.
    +
    +**What went wrong**
    +
    +1.  Mounted path confusion
    +    • We set `basePath: '/auth'` *and* mounted the router under `/api`, _then_
    +      passed the wrong flavour of handler (`auth` vs `auth.handler`).  Some
    +      combinations silently swallowed the request, others returned 404 or
    +      empty 500s.  **Take-away:**  always test the fully qualified URL you
    +      expect `/api/auth/sign-up/email` with curl before wiring the front-end.
    +
    +2.  Provider flags
    +    • The option names in the docs have changed over minor releases.  We used
    +      `allowSignUp` then `enableSignUp` – current correct key set is
    +      `providers.emailPassword.{ enabled, enableSignUp }`.
    +
    +3.  Body-parser order
    +    • Express’ `express.json()` must **follow** the Better-Auth router; if it
    +      runs first the request stream is consumed and Better-Auth hangs.
    +
    +4.  Non-existent adapter
    +    • `@better-auth/adapter-postgresql` is mentioned in old blog posts but is
    +      **not** published.  The supported way (as of 1.2.x) is to pass a
    +      pre-configured `pg.Pool`.
    +
    +5.  Session endpoint name
    +    • The canonical endpoint is `/session` (not `/get-session`).
    +
    +6.  CORS with credentials
    +    • `Access-Control-Allow-Origin` cannot be `*` when
    +      `withCredentials: true`.  Better-Auth’s internal CORS can be disabled
    +      and handled via Express to avoid double headers.
    +
    +### 9  Second-pass implementation plan (2025-06-10)
    +
    +1. RTFM
    +   – Read the *current* docs pages:
    +     • Core configuration: https://www.better-auth.com/docs/core/configuration
    +     • Email/password provider: https://www.better-auth.com/docs/authentication/email-password
    +     • Node adapter: https://www.better-auth.com/docs/integrations/express
    +     • PostgreSQL guide / schema expectations.
    +
    +2. Minimal, proven config
    +   ```ts
    +   const auth = betterAuth({
    +     database: new Pool({ connectionString: env.DATABASE_URL }),
    +
    +     baseURL : env.PUBLIC_URL,      // e.g. http://localhost:4000
    +     basePath: '/auth',
    +     secret  : env.BETTER_AUTH_SECRET,
    +
    +     providers: {
    +       emailPassword: {
    +         enabled      : true,
    +         enableSignUp : true,
    +         requireEmailVerification: false,
    +       },
    +     },
    +
    +     logLevel: env.NODE_ENV === 'production' ? 'info' : 'debug',
    +     cors    : { enabled: false },  // handled by Express
    +   });
    +   ```
    +
    +3. Mount order in Express
    +   ```ts
    +   app.use('/api', toNodeHandler(auth));
    +   app.use(express.json());  // after BA router
    +   ```
    +
    +4. Verify with curl tests **before** touching the front-end.
    +
    +   ```bash
    +   curl -i -X POST http://localhost:4000/api/auth/sign-up/email \
    +     -H 'Content-Type: application/json' \
    +     -d '{"email":"dev@example.com","password":"secret123"}'
    +   ```
    +
    +5. Front-end changes
    +   • calls `/api/auth/sign-up/email`, `/sign-in/email`, `/session`.
    +   • always `withCredentials: true`.
    +
    +6. Backend (FastAPI)
    +   • Hit `/api/auth/session` for cookie validation; cache for 60 s.
    +
    +7. Docker / env
    +   • Add `BETTER_AUTH_SECRET` and `PUBLIC_URL` env vars.
    +   • Drop unused JWT vars.
    +
    +8. CI
    +   • Integration test: create account, log in, call `/session`, ensure 200.
    +
    +9. Once green locally, merge the feature branch back to `main`.
    *** End Patch
    PATCH

    command.stdout (code: 1, duration: 0s)

    Invalid Context 0:
    ### 8  Lessons learned from first (failed) Better-Auth attempt

    command

    $ tail -n 40 docs/PROJECT_PLAN.md

    command.stdout (code: 0, duration: 0s)

        return user
    ```

    Backend routes:
    ... (37 more lines)

    command

    $ apply_patch <<'PATCH'
    *** Begin Patch
    *** Update File: docs/PROJECT_PLAN.md
    @@
     _End of plan – ready to implement._
    +
    +---
    +## 11  Post-mortem: first Better-Auth attempt (2025-06-09)
    +
    +Our initial migration to Better-Auth hit several snags.  Documenting them here
    +so the second pass is deliberate.
    +
    +### What broke
    +
    +| Area | Symptom | Root cause |
    +|------|---------|------------|
    +| Route mounting | Requests reached Express but hung (no status) | `express.json()` consumed the body *before* Better-Auth’s handler. |
    +| Provider flags | `EMAIL_AND_PASSWORD_SIGN_UP_IS_NOT_ENABLED` | Used outdated option names (`allowSignUp`, `emailAndPassword`). |
    +| Adapter | Build failed on `@better-auth/adapter-postgresql` | Package doesn’t exist – docs outdated. |
    +| CORS | Cookie requests failed | Wildcard `*` origin used while `withCredentials:true`. |
    +| Session endpoint | Backend 404 on `/get-session` | Current endpoint is `/session`. |
    +| Handler | 404 / empty response | Passed `auth.handler` instead of whole `auth` object to `toNodeHandler`. |
    +
    +### Second-pass plan (short)
    +
    +1. Re-read docs: core config, email/password, “Integrations → Express”.
    +2. Minimal reproducible config (see snippet below).  Verify with curl first.
    +3. Mount order: `app.use('/api', toNodeHandler(auth));` then `express.json()`.
    +4. Correct provider block:
    +   ```ts
    +   providers: {
    +     emailPassword: {
    +       enabled: true,
    +       enableSignUp: true,
    +       requireEmailVerification: false,
    +     },
    +   },
    +   ```
    +5. Backend hits `/api/auth/session` and caches result for 60 s.
    +6. Env vars: `BETTER_AUTH_SECRET`, `PUBLIC_URL`, drop JWT vars.
    +7. Add debug logging (`logLevel:'debug'`) only in dev.
    +8. Integration test in CI: sign-up → session → backend `/me` should return 200.
    +
    +```ts
    +const auth = betterAuth({
    +  database: new Pool({ connectionString: env.DATABASE_URL }),
    +  baseURL : env.PUBLIC_URL,
    +  basePath: '/auth',
    +  secret  : env.BETTER_AUTH_SECRET,
    +
    +  providers: {
    +    emailPassword: { enabled: true, enableSignUp: true },
    +  },
    +
    +  logLevel: process.env.NODE_ENV === 'production' ? 'info' : 'debug',
    +  cors: { enabled: false },
    +});
    +
    +app.use('/api', toNodeHandler(auth));   //  /api/auth/**
    +app.use(express.json());
    +```
    +
    +With these guard-rails we can attempt the integration again on a clean
    +feature branch.
    +
    *** End Patch
    PATCH

    command.stdout (code: 0, duration: 0s)

    Done!

codex
Added a thorough post-mortem and a concrete second-pass plan to
docs/PROJECT_PLAN.md (new section 11).

Contains:
• Table of issues we hit (route mounting, provider flags, adapter, CORS, etc.).
• Step-by-step plan referencing the correct docs, minimal config snippet, mount
  order, env vars, CI test outline.

This gives a clear roadmap for the next clean Better-Auth integration attempt.