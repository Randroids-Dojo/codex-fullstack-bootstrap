version: "3.9"

services:
  postgres:
    image: postgres:15
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: app
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 2s
      timeout: 2s
      retries: 15
    volumes:
      - dbdata:/var/lib/postgresql/data

  redis:
    image: redis:7

  auth-server:
    build: ./auth-server
    command: npm run dev
    env_file:
      - .env
    ports:
      - "4000:4000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    healthcheck:
      test: ["CMD-SHELL", "node -e \"require('http').get('http://localhost:4000/api/auth/ok', r => process.exit(r.statusCode===200?0:1)).on('error', () => process.exit(1))\""]
      interval: 5s
      timeout: 3s
      retries: 20

  backend:
    build: ./backend
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload
    env_file:
      - .env
    ports:
      - "8000:8000"
    depends_on:
      auth-server:
        condition: service_started
      postgres:
        condition: service_healthy
      redis:
        condition: service_started

  frontend:
    build: ./frontend
    env_file:
      - .env
    environment:
      - NODE_ENV=development
    command: npm run dev -- --host 0.0.0.0
    ports:
      - "3000:3000"
    depends_on:
      - auth-server
      - backend
    healthcheck:
      test: ["CMD-SHELL", "node -e \"require('http').get('http://localhost:3000', r => process.exit(r.statusCode===200?0:1)).on('error', () => process.exit(1))\""]
      interval: 5s
      timeout: 3s
      retries: 20

volumes:
  dbdata:
