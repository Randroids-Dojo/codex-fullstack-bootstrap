#!/usr/bin/env bash
# -----------------------------------------------------------------------------
# start-stack.sh
# -----------------------------------------------------------------------------
# Convenience wrapper that boots the full local development stack (PostgreSQL,
# Redis, auth-server, Python backend, React frontend) using Docker Compose.
#
# Usage:
#   ./start-stack.sh           # build images first, follow logs
#   ./start-stack.sh -d        # build then run detached
#   ./start-stack.sh --down    # stop containers and remove them
# -----------------------------------------------------------------------------

set -euo pipefail

cd "$(dirname "$0")"

function ensure_env_file() {
  if [[ ! -f .env ]]; then
    echo "[start-stack] .env not found – creating a minimal default one" >&2
    JWT_SECRET=$(openssl rand -base64 48 | tr -d '=+/')
    cat > .env <<EOF
# Auto-generated by start-stack.sh – feel free to edit.

DATABASE_URL=postgres://postgres:postgres@postgres:5432/app
REDIS_URL=redis://redis:6379/0
JWT_SECRET=$JWT_SECRET

# service ports (optional override)
AUTH_PORT=4000
BACKEND_PORT=8000
FRONTEND_PORT=3000

# frontend specific
VITE_AUTH_URL=http://localhost:4000/auth
VITE_API_URL=http://localhost:8000
EOF
  fi
}

cmd=${1:-up}

# Interpret first arg ---------------------------------------------------------
# We must check for explicit "down" **before** the generic wildcard pattern
# otherwise --down would match "-*" and fall through to "up".

case "$cmd" in
  --down|down)
    docker compose down --remove-orphans
    exit 0
    ;;
  -d|up|-*)
    ;; # handled below
esac

ensure_env_file

if [[ "$cmd" == "-d" ]]; then
  docker compose up --build -d --wait --wait-timeout 120
  echo "✅ Stack is ready (detached). Use 'docker compose ps' to inspect and 'docker compose logs -f' to follow logs."
else
  docker compose up --build --wait --wait-timeout 120
fi
